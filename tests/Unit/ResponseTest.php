<?php

namespace Prodemmi\Apiful\Tests\Unit;

use Illuminate\Http\Response;
use Prodemmi\Apiful\Tests\TestCase;
use Prodemmi\Apiful\Tests\CreateResponse;

class ResponseTest extends TestCase
{

    use CreateResponse, DataFactory;

    protected function setUp() : void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @group        success
     * @dataProvider successDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_success_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->successResponse('success', $useConstructor, $data, $message, $header);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(value($message), $response->getMessage());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        success
     * @dataProvider successDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_no_content_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->successResponse('noContent', $useConstructor, $data, $message, $header);

        $this->assertEquals(204, $response->getStatusCode());
        $this->assertEquals(value($message), $response->getMessage());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        error
     * @dataProvider errorDataProvider
     *
     * @param $useConstructor
     * @param $error
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_error_response($useConstructor, $error, $message, $header) : void
    {

        $response = $this->errorResponse('error', $useConstructor, $error, $message, $header);

        $this->assertEquals(500, $response->getStatusCode());
        $this->assertEquals(value($message), $response->getMessage());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        error
     * @dataProvider exceptionDataProvider
     *
     * @param $useConstructor
     * @param $exception
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_exception_response($useConstructor, $exception, $message, $header) : void
    {

        $response = $this->exceptionResponse($useConstructor, $exception, $message, $header);

        $message = value($message);

        $this->assertEquals(500, $response->getStatusCode());
        $this->assertEquals(filled($message) ? $message : $exception->getMessage(), $response->getMessage());
        $this->assertEquals($exception, $response->getErrors());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        error
     * @dataProvider errorDataProvider
     *
     * @param $useConstructor
     * @param $error
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_bad_request_response($useConstructor, $error, $message, $header) : void
    {

        $response = $this->errorResponse('badRequest', false, $error, $message, $header);

        $this->assertEquals(Response::HTTP_BAD_REQUEST, $response->getStatusCode());
        $this->assertEquals(value($message), $response->getMessage());
        $this->assertEquals(value($error), $response->getErrors());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        error
     * @dataProvider errorDataProvider
     *
     * @param $useConstructor
     * @param $error
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_unauthorized_response($useConstructor, $error, $message, $header) : void
    {

        $response = $this->errorResponse('unauthorized', $useConstructor, $error, $message, $header);

        $this->assertEquals(Response::HTTP_UNAUTHORIZED, $response->getStatusCode());
        $this->assertEquals(value($message), $response->getMessage());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        error
     * @dataProvider errorDataProvider
     *
     * @param $useConstructor
     * @param $error
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_forbidden_response($useConstructor, $error, $message, $header) : void
    {

        $response = $this->errorResponse('forbidden', $useConstructor, $error, $message, $header);

        $this->assertEquals(Response::HTTP_FORBIDDEN, $response->getStatusCode());
        $this->assertEquals(value($message), $response->getMessage());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        error
     * @dataProvider errorDataProvider
     *
     * @param $useConstructor
     * @param $error
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_internal_response($useConstructor, $error, $message, $header) : void
    {

        $response = $this->errorResponse('internal', $useConstructor, $error, $message, $header);

        $this->assertEquals(Response::HTTP_INTERNAL_SERVER_ERROR, $response->getStatusCode());
        $this->assertEquals(value($message), $response->getMessage());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        error
     * @dataProvider errorDataProvider
     *
     * @param $useConstructor
     * @param $error
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_not_acceptable_response($useConstructor, $error, $message, $header) : void
    {

        $response = $this->errorResponse('notAcceptable', $useConstructor, $error, $message, $header);

        $this->assertEquals(Response::HTTP_NOT_ACCEPTABLE, $response->getStatusCode());
        $this->assertEquals(value($message), $response->getMessage());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider entityDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_created_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->entityResponse('created', $useConstructor, $data, $message, $header);

        $this->assertEquals(Response::HTTP_CREATED, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider entityDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_not_created_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->entityResponse('notCreated', $useConstructor, $data, $message, $header, 500);

        $this->assertEquals(500, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider entityDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_updated_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->entityResponse('updated', $useConstructor, $data, $message, $header);

        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider entityDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_not_updated_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->entityResponse('notUpdated', $useConstructor, $data, $message, $header, 500);

        $this->assertEquals(500, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider entityDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_deleted_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->entityResponse('deleted', $useConstructor, $data, $message, $header);

        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider entityDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_not_deleted_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->entityResponse('notDeleted', $useConstructor, $data, $message, $header, 500);

        $this->assertEquals(500, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider entityDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_not_found_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->entityResponse('notFound', $useConstructor, $data, $message, $header);

        $this->assertEquals(Response::HTTP_NOT_FOUND, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider entityDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_invalid_query_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->entityResponse('invalidQuery', $useConstructor, $data, $message, $header);

        $this->assertEquals(Response::HTTP_BAD_REQUEST, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }

    /**
     * @group        entity
     * @dataProvider successDataProvider
     *
     * @param $useConstructor
     * @param $data
     * @param $message
     * @param $header
     *
     * @return void
     */
    public function test_with_pagination_response($useConstructor, $data, $message, $header) : void
    {

        $response = $this->paginationResponse($useConstructor, $data, $message, $header);

        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());
        $this->assertEquals(value($data), $response->getData());
        $this->assertEquals(value($header), $response->getHeaders());

    }
}
